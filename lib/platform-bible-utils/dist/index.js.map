{"version":3,"file":"index.js","sources":["../src/async-variable.ts","../src/unsubscriber-async-list.ts","../src/platform-event-emitter.model.ts","../src/scripture-util.ts","../src/unsubscriber.ts","../src/util.ts","../../../node_modules/fast-equals/dist/esm/index.mjs","../src/equality-checking.ts","../src/serialization.ts"],"sourcesContent":["/** This class provides a convenient way for one task to wait on a variable that another task sets. */\nexport default class AsyncVariable<T> {\n  private readonly variableName: string;\n  private readonly promiseToValue: Promise<T>;\n  private resolver: ((value: T) => void) | undefined;\n  private rejecter: ((reason: string | undefined) => void) | undefined;\n\n  /**\n   * Creates an instance of the class\n   *\n   * @param variableName Name to use when logging about this variable\n   * @param rejectIfNotSettledWithinMS Milliseconds to wait before verifying if the promise was\n   *   settled (resolved or rejected); will reject if it has not settled by that time. Use -1 if you\n   *   do not want a timeout at all.\n   */\n  constructor(variableName: string, rejectIfNotSettledWithinMS: number = 10000) {\n    this.variableName = variableName;\n    this.promiseToValue = new Promise<T>((resolve, reject) => {\n      this.resolver = resolve;\n      this.rejecter = reject;\n    });\n    if (rejectIfNotSettledWithinMS > 0) {\n      setTimeout(() => {\n        if (this.rejecter) {\n          this.rejecter(`Timeout reached when waiting for ${this.variableName} to settle`);\n          this.complete();\n        }\n      }, rejectIfNotSettledWithinMS);\n    }\n    Object.seal(this);\n  }\n\n  /**\n   * Get this variable's promise to a value. This always returns the same promise even after the\n   * value has been resolved or rejected.\n   *\n   * @returns The promise for the value to be set\n   */\n  get promise(): Promise<T> {\n    return this.promiseToValue;\n  }\n\n  /**\n   * A simple way to see if this variable's promise was resolved or rejected already\n   *\n   * @returns Whether the variable was already resolved or rejected\n   */\n  get hasSettled(): boolean {\n    return Object.isFrozen(this);\n  }\n\n  /**\n   * Resolve this variable's promise to the given value\n   *\n   * @param value This variable's promise will resolve to this value\n   * @param throwIfAlreadySettled Determines whether to throw if the variable was already resolved\n   *   or rejected\n   */\n  resolveToValue(value: T, throwIfAlreadySettled: boolean = false): void {\n    if (this.resolver) {\n      console.debug(`${this.variableName} is being resolved now`);\n      this.resolver(value);\n      this.complete();\n    } else {\n      if (throwIfAlreadySettled) throw Error(`${this.variableName} was already settled`);\n      console.debug(`Ignoring subsequent resolution of ${this.variableName}`);\n    }\n  }\n\n  /**\n   * Reject this variable's promise for the value with the given reason\n   *\n   * @param reason This variable's promise will be rejected with this reason\n   * @param throwIfAlreadySettled Determines whether to throw if the variable was already resolved\n   *   or rejected\n   */\n  rejectWithReason(reason: string, throwIfAlreadySettled: boolean = false): void {\n    if (this.rejecter) {\n      console.debug(`${this.variableName} is being rejected now`);\n      this.rejecter(reason);\n      this.complete();\n    } else {\n      if (throwIfAlreadySettled) throw Error(`${this.variableName} was already settled`);\n      console.debug(`Ignoring subsequent rejection of ${this.variableName}`);\n    }\n  }\n\n  /** Prevent any further updates to this variable */\n  private complete(): void {\n    this.resolver = undefined;\n    this.rejecter = undefined;\n    Object.freeze(this);\n  }\n}\n","import { Dispose } from './disposal.model';\nimport { Unsubscriber, UnsubscriberAsync } from './unsubscriber';\n\n/** Simple collection for UnsubscriberAsync objects that also provides an easy way to run them. */\nexport default class UnsubscriberAsyncList {\n  readonly unsubscribers = new Set<UnsubscriberAsync | Unsubscriber>();\n\n  constructor(private name = 'Anonymous') {}\n\n  /**\n   * Add unsubscribers to the list. Note that duplicates are not added twice.\n   *\n   * @param unsubscribers - Objects that were returned from a registration process.\n   */\n  add(...unsubscribers: (UnsubscriberAsync | Unsubscriber | Dispose)[]) {\n    unsubscribers.forEach((unsubscriber) => {\n      if ('dispose' in unsubscriber) this.unsubscribers.add(unsubscriber.dispose);\n      else this.unsubscribers.add(unsubscriber);\n    });\n  }\n\n  /**\n   * Run all unsubscribers added to this list and then clear the list.\n   *\n   * @returns `true` if all unsubscribers succeeded, `false` otherwise.\n   */\n  async runAllUnsubscribers(): Promise<boolean> {\n    const unsubs = [...this.unsubscribers].map((unsubscriber) => unsubscriber());\n    const results = await Promise.all(unsubs);\n    this.unsubscribers.clear();\n    return results.every((unsubscriberSucceeded, index) => {\n      if (!unsubscriberSucceeded)\n        console.error(`UnsubscriberAsyncList ${this.name}: Unsubscriber at index ${index} failed!`);\n\n      return unsubscriberSucceeded;\n    });\n  }\n}\n","/** Interfaces, classes, and functions related to events and event emitters */\n\nimport { Dispose } from './disposal.model';\nimport { PlatformEvent, PlatformEventHandler } from './platform-event';\n\n/**\n * Event manager - accepts subscriptions to an event and runs the subscription callbacks when the\n * event is emitted Use eventEmitter.event(callback) to subscribe to the event. Use\n * eventEmitter.emit(event) to run the subscriptions. Generally, this EventEmitter should be\n * private, and its event should be public. That way, the emitter is not publicized, but anyone can\n * subscribe to the event.\n */\nexport default class PlatformEventEmitter<T> implements Dispose {\n  /**\n   * Subscribes a function to run when this event is emitted.\n   *\n   * @param callback Function to run with the event when it is emitted\n   * @returns Unsubscriber function to run to stop calling the passed-in function when the event is\n   *   emitted\n   * @alias event\n   */\n  subscribe = this.event;\n\n  /** All callback functions that will run when this event is emitted. Lazy loaded */\n  private subscriptions?: PlatformEventHandler<T>[];\n  /** Event for listeners to subscribe to. Lazy loaded */\n  private lazyEvent?: PlatformEvent<T>;\n  /** Whether this emitter has been disposed */\n  private isDisposed = false;\n\n  /**\n   * Event for listeners to subscribe to. Subscribes a function to run when this event is emitted.\n   * Use like `const unsubscriber = event(callback)`\n   *\n   * @param callback Function to run with the event when it is emitted\n   * @returns Unsubscriber function to run to stop calling the passed-in function when the event is\n   *   emitted\n   */\n  get event(): PlatformEvent<T> {\n    this.assertNotDisposed();\n\n    if (!this.lazyEvent) {\n      this.lazyEvent = (callback) => {\n        if (!callback || typeof callback !== 'function')\n          throw new Error(`Event handler callback must be a function!`);\n\n        // Initialize this.subscriptions if it does not exist\n        if (!this.subscriptions) this.subscriptions = [];\n\n        this.subscriptions.push(callback);\n\n        return () => {\n          if (!this.subscriptions) return false; // Did not find any subscribed callbacks\n\n          const callbackIndex = this.subscriptions.indexOf(callback);\n\n          if (callbackIndex < 0) return false; // Did not find this callback in the subscriptions\n\n          // Remove the callback\n          this.subscriptions.splice(callbackIndex, 1);\n\n          return true;\n        };\n      };\n    }\n    return this.lazyEvent;\n  }\n\n  /** Disposes of this event, preparing it to release from memory */\n  dispose = () => {\n    return this.disposeFn();\n  };\n\n  /**\n   * Runs the subscriptions for the event\n   *\n   * @param event Event data to provide to subscribed callbacks\n   */\n  emit = (event: T) => {\n    // Do not do anything other than emitFn here. This emit is just binding `this` to emitFn\n    this.emitFn(event);\n  };\n\n  /**\n   * Function that runs the subscriptions for the event. Added here so children can override emit\n   * and still call the base functionality. See NetworkEventEmitter.emit for example\n   */\n  protected emitFn(event: T) {\n    this.assertNotDisposed();\n\n    this.subscriptions?.forEach((callback) => callback(event));\n  }\n\n  /** Check to make sure this emitter is not disposed. Throw if it is */\n  protected assertNotDisposed() {\n    if (this.isDisposed) throw new Error('Emitter is disposed');\n  }\n\n  /**\n   * Disposes of this event, preparing it to release from memory. Added here so children can\n   * override emit and still call the base functionality.\n   */\n  protected disposeFn() {\n    this.assertNotDisposed();\n\n    this.isDisposed = true;\n    this.subscriptions = undefined;\n    this.lazyEvent = undefined;\n    return Promise.resolve(true);\n  }\n}\n","import { BookInfo, ScriptureReference } from './scripture.model';\n\nconst scrBookData: BookInfo[] = [\n  { shortName: 'ERR', fullNames: ['ERROR'], chapters: -1 },\n  { shortName: 'GEN', fullNames: ['Genesis'], chapters: 50 },\n  { shortName: 'EXO', fullNames: ['Exodus'], chapters: 40 },\n  { shortName: 'LEV', fullNames: ['Leviticus'], chapters: 27 },\n  { shortName: 'NUM', fullNames: ['Numbers'], chapters: 36 },\n  { shortName: 'DEU', fullNames: ['Deuteronomy'], chapters: 34 },\n  { shortName: 'JOS', fullNames: ['Joshua'], chapters: 24 },\n  { shortName: 'JDG', fullNames: ['Judges'], chapters: 21 },\n  { shortName: 'RUT', fullNames: ['Ruth'], chapters: 4 },\n  { shortName: '1SA', fullNames: ['1 Samuel'], chapters: 31 },\n  { shortName: '2SA', fullNames: ['2 Samuel'], chapters: 24 },\n  { shortName: '1KI', fullNames: ['1 Kings'], chapters: 22 },\n  { shortName: '2KI', fullNames: ['2 Kings'], chapters: 25 },\n  { shortName: '1CH', fullNames: ['1 Chronicles'], chapters: 29 },\n  { shortName: '2CH', fullNames: ['2 Chronicles'], chapters: 36 },\n  { shortName: 'EZR', fullNames: ['Ezra'], chapters: 10 },\n  { shortName: 'NEH', fullNames: ['Nehemiah'], chapters: 13 },\n  { shortName: 'EST', fullNames: ['Esther'], chapters: 10 },\n  { shortName: 'JOB', fullNames: ['Job'], chapters: 42 },\n  { shortName: 'PSA', fullNames: ['Psalm', 'Psalms'], chapters: 150 },\n  { shortName: 'PRO', fullNames: ['Proverbs'], chapters: 31 },\n  { shortName: 'ECC', fullNames: ['Ecclesiastes'], chapters: 12 },\n  { shortName: 'SNG', fullNames: ['Song of Solomon', 'Song of Songs'], chapters: 8 },\n  { shortName: 'ISA', fullNames: ['Isaiah'], chapters: 66 },\n  { shortName: 'JER', fullNames: ['Jeremiah'], chapters: 52 },\n  { shortName: 'LAM', fullNames: ['Lamentations'], chapters: 5 },\n  { shortName: 'EZK', fullNames: ['Ezekiel'], chapters: 48 },\n  { shortName: 'DAN', fullNames: ['Daniel'], chapters: 12 },\n  { shortName: 'HOS', fullNames: ['Hosea'], chapters: 14 },\n  { shortName: 'JOL', fullNames: ['Joel'], chapters: 3 },\n  { shortName: 'AMO', fullNames: ['Amos'], chapters: 9 },\n  { shortName: 'OBA', fullNames: ['Obadiah'], chapters: 1 },\n  { shortName: 'JON', fullNames: ['Jonah'], chapters: 4 },\n  { shortName: 'MIC', fullNames: ['Micah'], chapters: 7 },\n  { shortName: 'NAM', fullNames: ['Nahum'], chapters: 3 },\n  { shortName: 'HAB', fullNames: ['Habakkuk'], chapters: 3 },\n  { shortName: 'ZEP', fullNames: ['Zephaniah'], chapters: 3 },\n  { shortName: 'HAG', fullNames: ['Haggai'], chapters: 2 },\n  { shortName: 'ZEC', fullNames: ['Zechariah'], chapters: 14 },\n  { shortName: 'MAL', fullNames: ['Malachi'], chapters: 4 },\n  { shortName: 'MAT', fullNames: ['Matthew'], chapters: 28 },\n  { shortName: 'MRK', fullNames: ['Mark'], chapters: 16 },\n  { shortName: 'LUK', fullNames: ['Luke'], chapters: 24 },\n  { shortName: 'JHN', fullNames: ['John'], chapters: 21 },\n  { shortName: 'ACT', fullNames: ['Acts'], chapters: 28 },\n  { shortName: 'ROM', fullNames: ['Romans'], chapters: 16 },\n  { shortName: '1CO', fullNames: ['1 Corinthians'], chapters: 16 },\n  { shortName: '2CO', fullNames: ['2 Corinthians'], chapters: 13 },\n  { shortName: 'GAL', fullNames: ['Galatians'], chapters: 6 },\n  { shortName: 'EPH', fullNames: ['Ephesians'], chapters: 6 },\n  { shortName: 'PHP', fullNames: ['Philippians'], chapters: 4 },\n  { shortName: 'COL', fullNames: ['Colossians'], chapters: 4 },\n  { shortName: '1TH', fullNames: ['1 Thessalonians'], chapters: 5 },\n  { shortName: '2TH', fullNames: ['2 Thessalonians'], chapters: 3 },\n  { shortName: '1TI', fullNames: ['1 Timothy'], chapters: 6 },\n  { shortName: '2TI', fullNames: ['2 Timothy'], chapters: 4 },\n  { shortName: 'TIT', fullNames: ['Titus'], chapters: 3 },\n  { shortName: 'PHM', fullNames: ['Philemon'], chapters: 1 },\n  { shortName: 'HEB', fullNames: ['Hebrews'], chapters: 13 },\n  { shortName: 'JAS', fullNames: ['James'], chapters: 5 },\n  { shortName: '1PE', fullNames: ['1 Peter'], chapters: 5 },\n  { shortName: '2PE', fullNames: ['2 Peter'], chapters: 3 },\n  { shortName: '1JN', fullNames: ['1 John'], chapters: 5 },\n  { shortName: '2JN', fullNames: ['2 John'], chapters: 1 },\n  { shortName: '3JN', fullNames: ['3 John'], chapters: 1 },\n  { shortName: 'JUD', fullNames: ['Jude'], chapters: 1 },\n  { shortName: 'REV', fullNames: ['Revelation'], chapters: 22 },\n];\n\nexport const FIRST_SCR_BOOK_NUM = 1;\nexport const LAST_SCR_BOOK_NUM = scrBookData.length - 1;\nexport const FIRST_SCR_CHAPTER_NUM = 1;\nexport const FIRST_SCR_VERSE_NUM = 1;\n\nexport const getChaptersForBook = (bookNum: number): number => {\n  return scrBookData[bookNum]?.chapters ?? -1;\n};\n\nexport const offsetBook = (scrRef: ScriptureReference, offset: number): ScriptureReference => ({\n  bookNum: Math.max(FIRST_SCR_BOOK_NUM, Math.min(scrRef.bookNum + offset, LAST_SCR_BOOK_NUM)),\n  chapterNum: 1,\n  verseNum: 1,\n});\n\nexport const offsetChapter = (scrRef: ScriptureReference, offset: number): ScriptureReference => ({\n  ...scrRef,\n  chapterNum: Math.min(\n    Math.max(FIRST_SCR_CHAPTER_NUM, scrRef.chapterNum + offset),\n    getChaptersForBook(scrRef.bookNum),\n  ),\n  verseNum: 1,\n});\n\nexport const offsetVerse = (scrRef: ScriptureReference, offset: number): ScriptureReference => ({\n  ...scrRef,\n  verseNum: Math.max(FIRST_SCR_VERSE_NUM, scrRef.verseNum + offset),\n});\n","/** Function to run to dispose of something. Returns true if successfully unsubscribed */\nexport type Unsubscriber = () => boolean;\n\n/**\n * Returns an Unsubscriber function that combines all the unsubscribers passed in.\n *\n * @param unsubscribers All unsubscribers to aggregate into one unsubscriber\n * @returns Function that unsubscribes from all passed in unsubscribers when run\n */\nexport const aggregateUnsubscribers = (unsubscribers: Unsubscriber[]): Unsubscriber => {\n  return (...args) => {\n    // Run the unsubscriber for each handler\n    const unsubs = unsubscribers.map((unsubscriber) => unsubscriber(...args));\n\n    // If all the unsubscribers resolve to truthiness, we succeed\n    return unsubs.every((success) => success);\n  };\n};\n\n/**\n * Function to run to dispose of something that runs asynchronously. The promise resolves to true if\n * successfully unsubscribed\n */\nexport type UnsubscriberAsync = () => Promise<boolean>;\n\n/**\n * Returns an UnsubscriberAsync function that combines all the unsubscribers passed in.\n *\n * @param unsubscribers - All unsubscribers to aggregate into one unsubscriber.\n * @returns Function that unsubscribes from all passed in unsubscribers when run\n */\nexport const aggregateUnsubscriberAsyncs = (\n  unsubscribers: (UnsubscriberAsync | Unsubscriber)[],\n): UnsubscriberAsync => {\n  return async (...args) => {\n    // Run the unsubscriber for each handler\n    const unsubPromises = unsubscribers.map(async (unsubscriber) => unsubscriber(...args));\n\n    // If all the unsubscribers resolve to truthiness, we succeed\n    return (await Promise.all(unsubPromises)).every((success) => success);\n  };\n};\n","/** Collection of functions, objects, and types that are used as helpers in other services. */\n\n// Thanks to blubberdiblub at https://stackoverflow.com/a/68141099/217579\nexport function newGuid(): string {\n  return '00-0-4-1-000'.replace(/[^-]/g, (s) =>\n    // @ts-expect-error ts(2363) this works fine\n    // eslint-disable-next-line no-bitwise\n    (((Math.random() + ~~s) * 0x10000) >> s).toString(16).padStart(4, '0'),\n  );\n}\n\n// thanks to DRAX at https://stackoverflow.com/a/9436948\n/**\n * Determine whether the object is a string\n *\n * @param o Object to determine if it is a string\n * @returns True if the object is a string; false otherwise\n */\nexport function isString(o: unknown): o is string {\n  return typeof o === 'string' || o instanceof String;\n}\n\n/**\n * Get a function that reduces calls to the function passed in\n *\n * @param fn The function to debounce\n * @param delay How much delay in milliseconds after the most recent call to the debounced function\n *   to call the function\n * @returns Function that, when called, only calls the function passed in at maximum every delay ms\n */\n// We don't know the parameter types since this function can be anything\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function debounce<T extends (...args: any[]) => void>(fn: T, delay = 300): T {\n  if (isString(fn)) throw new Error('Tried to debounce a string! Could be XSS');\n  let timeout: ReturnType<typeof setTimeout>;\n  // Ensure the right return type.\n  // eslint-disable-next-line no-type-assertion/no-type-assertion\n  return ((...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn(...args), delay);\n  }) as T;\n}\n\n/**\n * Groups each item in the array of items into a map according to the keySelector\n *\n * @param items Array of items to group by\n * @param keySelector Function to run on each item to get the key for the group to which it belongs\n * @param valueSelector Function to run on each item to get the value it should have in the group\n *   (like map function). If not provided, uses the item itself\n * @returns Map of keys to groups of values corresponding to each item\n */\nexport function groupBy<T, K>(items: T[], keySelector: (item: T) => K): Map<K, Array<T>>;\nexport function groupBy<T, K, V>(\n  items: T[],\n  keySelector: (item: T) => K,\n  valueSelector: (item: T, key: K) => V,\n): Map<K, Array<V>>;\nexport function groupBy<T, K, V = T>(\n  items: T[],\n  keySelector: (item: T) => K,\n  valueSelector?: (item: T, key: K) => V,\n): Map<K, Array<V | T>> {\n  const map = new Map<K, Array<V | T>>();\n  items.forEach((item) => {\n    const key = keySelector(item);\n    const group = map.get(key);\n    const value = valueSelector ? valueSelector(item, key) : item;\n    if (group) group.push(value);\n    else map.set(key, [value]);\n  });\n  return map;\n}\n\n// From https://kentcdodds.com/blog/get-a-catch-block-error-message-with-typescript\ntype ErrorWithMessage = {\n  message: string;\n};\n\n// From https://kentcdodds.com/blog/get-a-catch-block-error-message-with-typescript\nfunction isErrorWithMessage(error: unknown): error is ErrorWithMessage {\n  return (\n    typeof error === 'object' &&\n    // We're potentially dealing with objects we didn't create, so they might contain `null`\n    // eslint-disable-next-line no-null/no-null\n    error !== null &&\n    'message' in error &&\n    // Type assert `error` to check it's `message`.\n    // eslint-disable-next-line no-type-assertion/no-type-assertion\n    typeof (error as Record<string, unknown>).message === 'string'\n  );\n}\n\n// From https://kentcdodds.com/blog/get-a-catch-block-error-message-with-typescript\n/**\n * Function to get an error from the object (useful for getting an error in a catch block)\n *\n * @param error Error object whose message to get\n * @returns Message of the error - if object has message, returns message. Otherwise tries to\n *   stringify\n */\nfunction toErrorWithMessage(maybeError: unknown): ErrorWithMessage {\n  if (isErrorWithMessage(maybeError)) return maybeError;\n\n  try {\n    return new Error(JSON.stringify(maybeError));\n  } catch {\n    // fallback in case there's an error stringifying the maybeError\n    // like with circular references for example.\n    return new Error(String(maybeError));\n  }\n}\n\n// From https://kentcdodds.com/blog/get-a-catch-block-error-message-with-typescript\n/**\n * Function to get an error message from the object (useful for getting error message in a catch\n * block)\n *\n * @example `try {...} catch (e) { logger.info(getErrorMessage(e)) }`\n *\n * @param error Error object whose message to get\n * @returns Message of the error - if object has message, returns message. Otherwise tries to\n *   stringify\n */\nexport function getErrorMessage(error: unknown) {\n  return toErrorWithMessage(error).message;\n}\n\n/** Asynchronously waits for the specified number of milliseconds. (wraps setTimeout in a promise) */\nexport function wait(ms: number) {\n  // eslint-disable-next-line no-promise-executor-return\n  return new Promise<void>((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Runs the specified function and will timeout if it takes longer than the specified wait time\n *\n * @param fn The function to run\n * @param maxWaitTimeInMS The maximum amount of time to wait for the function to resolve\n * @returns Promise that resolves to the resolved value of the function or undefined if it ran\n *   longer than the specified wait time\n */\nexport function waitForDuration<TResult>(fn: () => Promise<TResult>, maxWaitTimeInMS: number) {\n  const timeout = wait(maxWaitTimeInMS).then(() => undefined);\n  return Promise.any([timeout, fn()]);\n}\n\n/**\n * Get all functions on an object and its prototype chain (so we don't miss any class methods or any\n * object methods). Note that the functions on the final item in the prototype chain (i.e., Object)\n * are skipped to avoid including functions like `__defineGetter__`, `__defineSetter__`, `toString`,\n * etc.\n *\n * @param obj Object whose functions to get\n * @param objId Optional ID of the object to use for debug logging\n * @returns Array of all function names on an object\n */\n// Note: lodash has something that MIGHT do the same thing as this. Investigate for https://github.com/paranext/paranext-core/issues/134\nexport function getAllObjectFunctionNames(\n  obj: { [property: string]: unknown },\n  objId: string = 'obj',\n): Set<string> {\n  const objectFunctionNames = new Set<string>();\n\n  // Get all function properties directly defined on the object\n  Object.getOwnPropertyNames(obj).forEach((property) => {\n    try {\n      if (typeof obj[property] === 'function') objectFunctionNames.add(property);\n    } catch (error) {\n      console.debug(`Skipping ${property} on ${objId} due to error: ${error}`);\n    }\n  });\n\n  // Walk up the prototype chain and get additional function properties, skipping the functions\n  // provided by the final (Object) prototype\n  let objectPrototype = Object.getPrototypeOf(obj);\n  while (objectPrototype && Object.getPrototypeOf(objectPrototype)) {\n    Object.getOwnPropertyNames(objectPrototype).forEach((property) => {\n      try {\n        if (typeof obj[property] === 'function') objectFunctionNames.add(property);\n      } catch (error) {\n        console.debug(`Skipping ${property} on ${objId}'s prototype due to error: ${error}`);\n      }\n    });\n    objectPrototype = Object.getPrototypeOf(objectPrototype);\n  }\n\n  return objectFunctionNames;\n}\n","var getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Combine two comparators into a single comparators.\n */\nfunction combineComparators(comparatorA, comparatorB) {\n    return function isEqual(a, b, state) {\n        return comparatorA(a, b, state) && comparatorB(a, b, state);\n    };\n}\n/**\n * Wrap the provided `areItemsEqual` method to manage the circular state, allowing\n * for circular references to be safely included in the comparison without creating\n * stack overflows.\n */\nfunction createIsCircular(areItemsEqual) {\n    return function isCircular(a, b, state) {\n        if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n            return areItemsEqual(a, b, state);\n        }\n        var cache = state.cache;\n        var cachedA = cache.get(a);\n        var cachedB = cache.get(b);\n        if (cachedA && cachedB) {\n            return cachedA === b && cachedB === a;\n        }\n        cache.set(a, b);\n        cache.set(b, a);\n        var result = areItemsEqual(a, b, state);\n        cache.delete(a);\n        cache.delete(b);\n        return result;\n    };\n}\n/**\n * Get the properties to strictly examine, which include both own properties that are\n * not enumerable and symbol properties.\n */\nfunction getStrictProperties(object) {\n    return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n}\n/**\n * Whether the object contains the property passed as an own property.\n */\nvar hasOwn = Object.hasOwn ||\n    (function (object, property) {\n        return hasOwnProperty.call(object, property);\n    });\n/**\n * Whether the values passed are strictly equal or both NaN.\n */\nfunction sameValueZeroEqual(a, b) {\n    return a || b ? a === b : a === b || (a !== a && b !== b);\n}\n\nvar OWNER = '_owner';\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, keys = Object.keys;\n/**\n * Whether the arrays are equal in value.\n */\nfunction areArraysEqual(a, b, state) {\n    var index = a.length;\n    if (b.length !== index) {\n        return false;\n    }\n    while (index-- > 0) {\n        if (!state.equals(a[index], b[index], index, index, a, b, state)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Whether the dates passed are equal in value.\n */\nfunction areDatesEqual(a, b) {\n    return sameValueZeroEqual(a.getTime(), b.getTime());\n}\n/**\n * Whether the `Map`s are equal in value.\n */\nfunction areMapsEqual(a, b, state) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    var matchedIndices = {};\n    var aIterable = a.entries();\n    var index = 0;\n    var aResult;\n    var bResult;\n    while ((aResult = aIterable.next())) {\n        if (aResult.done) {\n            break;\n        }\n        var bIterable = b.entries();\n        var hasMatch = false;\n        var matchIndex = 0;\n        while ((bResult = bIterable.next())) {\n            if (bResult.done) {\n                break;\n            }\n            var _a = aResult.value, aKey = _a[0], aValue = _a[1];\n            var _b = bResult.value, bKey = _b[0], bValue = _b[1];\n            if (!hasMatch &&\n                !matchedIndices[matchIndex] &&\n                (hasMatch =\n                    state.equals(aKey, bKey, index, matchIndex, a, b, state) &&\n                        state.equals(aValue, bValue, aKey, bKey, a, b, state))) {\n                matchedIndices[matchIndex] = true;\n            }\n            matchIndex++;\n        }\n        if (!hasMatch) {\n            return false;\n        }\n        index++;\n    }\n    return true;\n}\n/**\n * Whether the objects are equal in value.\n */\nfunction areObjectsEqual(a, b, state) {\n    var properties = keys(a);\n    var index = properties.length;\n    if (keys(b).length !== index) {\n        return false;\n    }\n    var property;\n    // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n    while (index-- > 0) {\n        property = properties[index];\n        if (property === OWNER &&\n            (a.$$typeof || b.$$typeof) &&\n            a.$$typeof !== b.$$typeof) {\n            return false;\n        }\n        if (!hasOwn(b, property) ||\n            !state.equals(a[property], b[property], property, property, a, b, state)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Whether the objects are equal in value with strict property checking.\n */\nfunction areObjectsEqualStrict(a, b, state) {\n    var properties = getStrictProperties(a);\n    var index = properties.length;\n    if (getStrictProperties(b).length !== index) {\n        return false;\n    }\n    var property;\n    var descriptorA;\n    var descriptorB;\n    // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n    while (index-- > 0) {\n        property = properties[index];\n        if (property === OWNER &&\n            (a.$$typeof || b.$$typeof) &&\n            a.$$typeof !== b.$$typeof) {\n            return false;\n        }\n        if (!hasOwn(b, property)) {\n            return false;\n        }\n        if (!state.equals(a[property], b[property], property, property, a, b, state)) {\n            return false;\n        }\n        descriptorA = getOwnPropertyDescriptor(a, property);\n        descriptorB = getOwnPropertyDescriptor(b, property);\n        if ((descriptorA || descriptorB) &&\n            (!descriptorA ||\n                !descriptorB ||\n                descriptorA.configurable !== descriptorB.configurable ||\n                descriptorA.enumerable !== descriptorB.enumerable ||\n                descriptorA.writable !== descriptorB.writable)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Whether the primitive wrappers passed are equal in value.\n */\nfunction arePrimitiveWrappersEqual(a, b) {\n    return sameValueZeroEqual(a.valueOf(), b.valueOf());\n}\n/**\n * Whether the regexps passed are equal in value.\n */\nfunction areRegExpsEqual(a, b) {\n    return a.source === b.source && a.flags === b.flags;\n}\n/**\n * Whether the `Set`s are equal in value.\n */\nfunction areSetsEqual(a, b, state) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    var matchedIndices = {};\n    var aIterable = a.values();\n    var aResult;\n    var bResult;\n    while ((aResult = aIterable.next())) {\n        if (aResult.done) {\n            break;\n        }\n        var bIterable = b.values();\n        var hasMatch = false;\n        var matchIndex = 0;\n        while ((bResult = bIterable.next())) {\n            if (bResult.done) {\n                break;\n            }\n            if (!hasMatch &&\n                !matchedIndices[matchIndex] &&\n                (hasMatch = state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a, b, state))) {\n                matchedIndices[matchIndex] = true;\n            }\n            matchIndex++;\n        }\n        if (!hasMatch) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Whether the TypedArray instances are equal in value.\n */\nfunction areTypedArraysEqual(a, b) {\n    var index = a.length;\n    if (b.length !== index) {\n        return false;\n    }\n    while (index-- > 0) {\n        if (a[index] !== b[index]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvar ARGUMENTS_TAG = '[object Arguments]';\nvar BOOLEAN_TAG = '[object Boolean]';\nvar DATE_TAG = '[object Date]';\nvar MAP_TAG = '[object Map]';\nvar NUMBER_TAG = '[object Number]';\nvar OBJECT_TAG = '[object Object]';\nvar REG_EXP_TAG = '[object RegExp]';\nvar SET_TAG = '[object Set]';\nvar STRING_TAG = '[object String]';\nvar isArray = Array.isArray;\nvar isTypedArray = typeof ArrayBuffer === 'function' && ArrayBuffer.isView\n    ? ArrayBuffer.isView\n    : null;\nvar assign = Object.assign;\nvar getTag = Object.prototype.toString.call.bind(Object.prototype.toString);\n/**\n * Create a comparator method based on the type-specific equality comparators passed.\n */\nfunction createEqualityComparator(_a) {\n    var areArraysEqual = _a.areArraysEqual, areDatesEqual = _a.areDatesEqual, areMapsEqual = _a.areMapsEqual, areObjectsEqual = _a.areObjectsEqual, arePrimitiveWrappersEqual = _a.arePrimitiveWrappersEqual, areRegExpsEqual = _a.areRegExpsEqual, areSetsEqual = _a.areSetsEqual, areTypedArraysEqual = _a.areTypedArraysEqual;\n    /**\n     * compare the value of the two objects and return true if they are equivalent in values\n     */\n    return function comparator(a, b, state) {\n        // If the items are strictly equal, no need to do a value comparison.\n        if (a === b) {\n            return true;\n        }\n        // If the items are not non-nullish objects, then the only possibility\n        // of them being equal but not strictly is if they are both `NaN`. Since\n        // `NaN` is uniquely not equal to itself, we can use self-comparison of\n        // both objects, which is faster than `isNaN()`.\n        if (a == null ||\n            b == null ||\n            typeof a !== 'object' ||\n            typeof b !== 'object') {\n            return a !== a && b !== b;\n        }\n        var constructor = a.constructor;\n        // Checks are listed in order of commonality of use-case:\n        //   1. Common complex object types (plain object, array)\n        //   2. Common data values (date, regexp)\n        //   3. Less-common complex object types (map, set)\n        //   4. Less-common data values (promise, primitive wrappers)\n        // Inherently this is both subjective and assumptive, however\n        // when reviewing comparable libraries in the wild this order\n        // appears to be generally consistent.\n        // Constructors should match, otherwise there is potential for false positives\n        // between class and subclass or custom object and POJO.\n        if (constructor !== b.constructor) {\n            return false;\n        }\n        // `isPlainObject` only checks against the object's own realm. Cross-realm\n        // comparisons are rare, and will be handled in the ultimate fallback, so\n        // we can avoid capturing the string tag.\n        if (constructor === Object) {\n            return areObjectsEqual(a, b, state);\n        }\n        // `isArray()` works on subclasses and is cross-realm, so we can avoid capturing\n        // the string tag or doing an `instanceof` check.\n        if (isArray(a)) {\n            return areArraysEqual(a, b, state);\n        }\n        // `isTypedArray()` works on all possible TypedArray classes, so we can avoid\n        // capturing the string tag or comparing against all possible constructors.\n        if (isTypedArray != null && isTypedArray(a)) {\n            return areTypedArraysEqual(a, b, state);\n        }\n        // Try to fast-path equality checks for other complex object types in the\n        // same realm to avoid capturing the string tag. Strict equality is used\n        // instead of `instanceof` because it is more performant for the common\n        // use-case. If someone is subclassing a native class, it will be handled\n        // with the string tag comparison.\n        if (constructor === Date) {\n            return areDatesEqual(a, b, state);\n        }\n        if (constructor === RegExp) {\n            return areRegExpsEqual(a, b, state);\n        }\n        if (constructor === Map) {\n            return areMapsEqual(a, b, state);\n        }\n        if (constructor === Set) {\n            return areSetsEqual(a, b, state);\n        }\n        // Since this is a custom object, capture the string tag to determing its type.\n        // This is reasonably performant in modern environments like v8 and SpiderMonkey.\n        var tag = getTag(a);\n        if (tag === DATE_TAG) {\n            return areDatesEqual(a, b, state);\n        }\n        if (tag === REG_EXP_TAG) {\n            return areRegExpsEqual(a, b, state);\n        }\n        if (tag === MAP_TAG) {\n            return areMapsEqual(a, b, state);\n        }\n        if (tag === SET_TAG) {\n            return areSetsEqual(a, b, state);\n        }\n        if (tag === OBJECT_TAG) {\n            // The exception for value comparison is custom `Promise`-like class instances. These should\n            // be treated the same as standard `Promise` objects, which means strict equality, and if\n            // it reaches this point then that strict equality comparison has already failed.\n            return (typeof a.then !== 'function' &&\n                typeof b.then !== 'function' &&\n                areObjectsEqual(a, b, state));\n        }\n        // If an arguments tag, it should be treated as a standard object.\n        if (tag === ARGUMENTS_TAG) {\n            return areObjectsEqual(a, b, state);\n        }\n        // As the penultimate fallback, check if the values passed are primitive wrappers. This\n        // is very rare in modern JS, which is why it is deprioritized compared to all other object\n        // types.\n        if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {\n            return arePrimitiveWrappersEqual(a, b, state);\n        }\n        // If not matching any tags that require a specific type of comparison, then we hard-code false because\n        // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n        //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n        //     comparison that can be made.\n        //   - For types that can be introspected, but rarely have requirements to be compared\n        //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n        //     use-cases (may be included in a future release, if requested enough).\n        //   - For types that can be introspected but do not have an objective definition of what\n        //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n        // In all cases, these decisions should be reevaluated based on changes to the language and\n        // common development practices.\n        return false;\n    };\n}\n/**\n * Create the configuration object used for building comparators.\n */\nfunction createEqualityComparatorConfig(_a) {\n    var circular = _a.circular, createCustomConfig = _a.createCustomConfig, strict = _a.strict;\n    var config = {\n        areArraysEqual: strict\n            ? areObjectsEqualStrict\n            : areArraysEqual,\n        areDatesEqual: areDatesEqual,\n        areMapsEqual: strict\n            ? combineComparators(areMapsEqual, areObjectsEqualStrict)\n            : areMapsEqual,\n        areObjectsEqual: strict\n            ? areObjectsEqualStrict\n            : areObjectsEqual,\n        arePrimitiveWrappersEqual: arePrimitiveWrappersEqual,\n        areRegExpsEqual: areRegExpsEqual,\n        areSetsEqual: strict\n            ? combineComparators(areSetsEqual, areObjectsEqualStrict)\n            : areSetsEqual,\n        areTypedArraysEqual: strict\n            ? areObjectsEqualStrict\n            : areTypedArraysEqual,\n    };\n    if (createCustomConfig) {\n        config = assign({}, config, createCustomConfig(config));\n    }\n    if (circular) {\n        var areArraysEqual$1 = createIsCircular(config.areArraysEqual);\n        var areMapsEqual$1 = createIsCircular(config.areMapsEqual);\n        var areObjectsEqual$1 = createIsCircular(config.areObjectsEqual);\n        var areSetsEqual$1 = createIsCircular(config.areSetsEqual);\n        config = assign({}, config, {\n            areArraysEqual: areArraysEqual$1,\n            areMapsEqual: areMapsEqual$1,\n            areObjectsEqual: areObjectsEqual$1,\n            areSetsEqual: areSetsEqual$1,\n        });\n    }\n    return config;\n}\n/**\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\n * use inside the built comparator.\n */\nfunction createInternalEqualityComparator(compare) {\n    return function (a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {\n        return compare(a, b, state);\n    };\n}\n/**\n * Create the `isEqual` function used by the consuming application.\n */\nfunction createIsEqual(_a) {\n    var circular = _a.circular, comparator = _a.comparator, createState = _a.createState, equals = _a.equals, strict = _a.strict;\n    if (createState) {\n        return function isEqual(a, b) {\n            var _a = createState(), _b = _a.cache, cache = _b === void 0 ? circular ? new WeakMap() : undefined : _b, meta = _a.meta;\n            return comparator(a, b, {\n                cache: cache,\n                equals: equals,\n                meta: meta,\n                strict: strict,\n            });\n        };\n    }\n    if (circular) {\n        return function isEqual(a, b) {\n            return comparator(a, b, {\n                cache: new WeakMap(),\n                equals: equals,\n                meta: undefined,\n                strict: strict,\n            });\n        };\n    }\n    var state = {\n        cache: undefined,\n        equals: equals,\n        meta: undefined,\n        strict: strict,\n    };\n    return function isEqual(a, b) {\n        return comparator(a, b, state);\n    };\n}\n\n/**\n * Whether the items passed are deeply-equal in value.\n */\nvar deepEqual = createCustomEqual();\n/**\n * Whether the items passed are deeply-equal in value based on strict comparison.\n */\nvar strictDeepEqual = createCustomEqual({ strict: true });\n/**\n * Whether the items passed are deeply-equal in value, including circular references.\n */\nvar circularDeepEqual = createCustomEqual({ circular: true });\n/**\n * Whether the items passed are deeply-equal in value, including circular references,\n * based on strict comparison.\n */\nvar strictCircularDeepEqual = createCustomEqual({\n    circular: true,\n    strict: true,\n});\n/**\n * Whether the items passed are shallowly-equal in value.\n */\nvar shallowEqual = createCustomEqual({\n    createInternalComparator: function () { return sameValueZeroEqual; },\n});\n/**\n * Whether the items passed are shallowly-equal in value based on strict comparison\n */\nvar strictShallowEqual = createCustomEqual({\n    strict: true,\n    createInternalComparator: function () { return sameValueZeroEqual; },\n});\n/**\n * Whether the items passed are shallowly-equal in value, including circular references.\n */\nvar circularShallowEqual = createCustomEqual({\n    circular: true,\n    createInternalComparator: function () { return sameValueZeroEqual; },\n});\n/**\n * Whether the items passed are shallowly-equal in value, including circular references,\n * based on strict comparison.\n */\nvar strictCircularShallowEqual = createCustomEqual({\n    circular: true,\n    createInternalComparator: function () { return sameValueZeroEqual; },\n    strict: true,\n});\n/**\n * Create a custom equality comparison method.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `RegExp.prototype.flags` out of the box.\n */\nfunction createCustomEqual(options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.circular, circular = _a === void 0 ? false : _a, createCustomInternalComparator = options.createInternalComparator, createState = options.createState, _b = options.strict, strict = _b === void 0 ? false : _b;\n    var config = createEqualityComparatorConfig(options);\n    var comparator = createEqualityComparator(config);\n    var equals = createCustomInternalComparator\n        ? createCustomInternalComparator(comparator)\n        : createInternalEqualityComparator(comparator);\n    return createIsEqual({ circular: circular, comparator: comparator, createState: createState, equals: equals, strict: strict });\n}\n\nexport { circularDeepEqual, circularShallowEqual, createCustomEqual, deepEqual, sameValueZeroEqual, shallowEqual, strictCircularDeepEqual, strictCircularShallowEqual, strictDeepEqual, strictShallowEqual };\n//# sourceMappingURL=index.mjs.map\n","// There is a circular version https://www.npmjs.com/package/fast-equals#circulardeepequal that I\n// think allows comparing React refs (which have circular references in particular places that this\n// library would ignore). Maybe we can change to that version sometime if needed.\nimport { deepEqual as isEqualDeep } from 'fast-equals';\n\n/**\n * Check that two objects are deeply equal, comparing members of each object and such\n *\n * @param a The first object to compare\n * @param b The second object to compare\n *\n *   WARNING: Objects like arrays from different iframes have different constructor function\n *   references even if they do the same thing, so this deep equality comparison fails objects that\n *   look the same but have different constructors because different constructors could produce\n *   false positives in [a few specific\n *   situations](https://github.com/planttheidea/fast-equals/blob/a41afc0a240ad5a472e47b53791e9be017f52281/src/comparator.ts#L96).\n *   This means that two objects like arrays from different iframes that look the same will fail\n *   this check. Please use some other means to check deep equality in those situations.\n *\n *   Note: This deep equality check considers `undefined` values on keys of objects NOT to be equal to\n *   not specifying the key at all. For example, `{ stuff: 3, things: undefined }` and `{ stuff: 3\n *   }` are not considered equal in this case\n *\n *   - For more information and examples, see [this\n *       CodeSandbox](https://codesandbox.io/s/deepequallibrarycomparison-4g4kk4?file=/src/index.mjs).\n *\n * @returns True if a and b are deeply equal; false otherwise\n */\nexport default function deepEqual(a: unknown, b: unknown) {\n  return isEqualDeep(a, b);\n}\n","/**\n * Converts a JavaScript value to a JSON string, changing `undefined` properties in the JavaScript\n * object to `null` properties in the JSON string.\n *\n * WARNING: `null` values will become `undefined` values after passing through {@link serialize} then\n * {@link deserialize}. For example, `{ a: 1, b: undefined, c: null }` will become `{ a: 1, b:\n * undefined, c: undefined }`. If you are passing around user data that needs to retain `null`\n * values, you should wrap them yourself in a string before using this function. Alternatively, you\n * can write your own replacer that will preserve `null` in a way that you can recover later.\n *\n * @param value A JavaScript value, usually an object or array, to be converted.\n * @param replacer A function that transforms the results. Note that all `undefined` values returned\n *   by the replacer will be further transformed into `null` in the JSON string.\n * @param space Adds indentation, white space, and line break characters to the return-value JSON\n *   text to make it easier to read. See the `space` parameter of `JSON.stringify` for more\n *   details.\n */\nexport function serialize(\n  value: unknown,\n  replacer?: (this: unknown, key: string, value: unknown) => unknown,\n  space?: string | number,\n): string {\n  const undefinedReplacer = (replacerKey: string, replacerValue: unknown) => {\n    let newValue = replacerValue;\n    if (replacer) newValue = replacer(replacerKey, newValue);\n    // All `undefined` values become `null` on the way from JS objects into JSON strings\n    // eslint-disable-next-line no-null/no-null\n    if (newValue === undefined) newValue = null;\n    return newValue;\n  };\n  return JSON.stringify(value, undefinedReplacer, space);\n}\n\n/**\n * Converts a JSON string into a value, converting all `null` properties from JSON into `undefined`\n * in the returned JavaScript value/object.\n *\n * WARNING: `null` values will become `undefined` values after passing through {@link serialize} then\n * {@link deserialize}. For example, `{ a: 1, b: undefined, c: null }` will become `{ a: 1, b:\n * undefined, c: undefined }`. If you are passing around user data that needs to retain `null`\n * values, you should wrap them yourself in a string before using this function. Alternatively, you\n * can write your own replacer that will preserve `null` in a way that you can recover later.\n *\n * @param text A valid JSON string.\n * @param reviver A function that transforms the results. This function is called for each member of\n *   the object. If a member contains nested objects, the nested objects are transformed before the\n *   parent object is. Note that `null` values are converted into `undefined` values after the\n *   reviver has run.\n */\nexport function deserialize(\n  value: string,\n  reviver?: (this: unknown, key: string, value: unknown) => unknown,\n  // Need to use `any` instead of `unknown` here to match the signature of JSON.parse\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // Helper function to replace `null` with `undefined` on a per property basis. This can't be done\n  // with our own reviver because `JSON.parse` removes `undefined` properties from the return value.\n  function replaceNull(obj: Record<string | number, unknown>): Record<string | number, unknown> {\n    Object.keys(obj).forEach((key: string | number) => {\n      // We only want to replace `null`, not other falsy values\n      // eslint-disable-next-line no-null/no-null\n      if (obj[key] === null) obj[key] = undefined;\n      // If the property is an object, recursively call the helper function on it\n      else if (typeof obj[key] === 'object')\n        // Since the object came from a string, we know the keys will not be symbols\n        // eslint-disable-next-line no-type-assertion/no-type-assertion\n        obj[key] = replaceNull(obj[key] as Record<string | number, unknown>);\n    });\n    return obj;\n  }\n\n  const parsedObject = JSON.parse(value, reviver);\n  // Explicitly convert the value 'null' that isn't stored as a property on an object to 'undefined'\n  // eslint-disable-next-line no-null/no-null\n  if (parsedObject === null) return undefined;\n  if (typeof parsedObject === 'object') return replaceNull(parsedObject);\n  return parsedObject;\n}\n\n/**\n * Check to see if the value is serializable without losing information\n *\n * @param value Value to test\n * @returns True if serializable; false otherwise\n *\n *   Note: the values `undefined` and `null` are serializable (on their own or in an array), but\n *   `null` values get transformed into `undefined` when serializing/deserializing.\n *\n *   WARNING: This is inefficient right now as it stringifies, parses, stringifies, and === the value.\n *   Please only use this if you need to\n *\n *   DISCLAIMER: this does not successfully detect that values are not serializable in some cases:\n *\n *   - Losses of removed properties like functions and `Map`s\n *   - Class instances (not deserializable into class instances without special code)\n *\n *   We intend to improve this in the future if it becomes important to do so. See [`JSON.stringify`\n *   documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description)\n *   for more information.\n */\nexport function isSerializable(value: unknown): boolean {\n  try {\n    const serializedValue = serialize(value);\n    return serializedValue === serialize(deserialize(serializedValue));\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * HTML Encodes the provided string. Thanks to ChatGPT\n *\n * @param str String to HTML encode\n * @returns HTML-encoded string\n */\nexport const htmlEncode = (str: string): string =>\n  str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n"],"names":["AsyncVariable","variableName","rejectIfNotSettledWithinMS","__publicField","resolve","reject","value","throwIfAlreadySettled","reason","UnsubscriberAsyncList","name","unsubscribers","unsubscriber","unsubs","results","unsubscriberSucceeded","index","PlatformEventEmitter","event","callback","callbackIndex","_a","scrBookData","FIRST_SCR_BOOK_NUM","LAST_SCR_BOOK_NUM","FIRST_SCR_CHAPTER_NUM","FIRST_SCR_VERSE_NUM","getChaptersForBook","bookNum","offsetBook","scrRef","offset","offsetChapter","offsetVerse","aggregateUnsubscribers","args","success","aggregateUnsubscriberAsyncs","unsubPromises","newGuid","s","isString","o","debounce","fn","delay","timeout","groupBy","items","keySelector","valueSelector","map","item","key","group","isErrorWithMessage","error","toErrorWithMessage","maybeError","getErrorMessage","wait","ms","waitForDuration","maxWaitTimeInMS","getAllObjectFunctionNames","obj","objId","objectFunctionNames","property","objectPrototype","getOwnPropertyNames","getOwnPropertySymbols","hasOwnProperty","combineComparators","comparatorA","comparatorB","b","state","createIsCircular","areItemsEqual","a","cache","cachedA","cachedB","result","getStrictProperties","object","hasOwn","sameValueZeroEqual","OWNER","getOwnPropertyDescriptor","keys","areArraysEqual","areDatesEqual","areMapsEqual","matchedIndices","aIterable","aResult","bResult","bIterable","hasMatch","matchIndex","aKey","aValue","_b","bKey","bValue","areObjectsEqual","properties","areObjectsEqualStrict","descriptorA","descriptorB","arePrimitiveWrappersEqual","areRegExpsEqual","areSetsEqual","areTypedArraysEqual","ARGUMENTS_TAG","BOOLEAN_TAG","DATE_TAG","MAP_TAG","NUMBER_TAG","OBJECT_TAG","REG_EXP_TAG","SET_TAG","STRING_TAG","isArray","isTypedArray","assign","getTag","createEqualityComparator","constructor","tag","createEqualityComparatorConfig","circular","createCustomConfig","strict","config","areArraysEqual$1","areMapsEqual$1","areObjectsEqual$1","areSetsEqual$1","createInternalEqualityComparator","compare","_indexOrKeyA","_indexOrKeyB","_parentA","_parentB","createIsEqual","comparator","createState","equals","meta","deepEqual","createCustomEqual","options","createCustomInternalComparator","isEqualDeep","serialize","replacer","space","replacerKey","replacerValue","newValue","deserialize","reviver","replaceNull","parsedObject","isSerializable","serializedValue","htmlEncode","str"],"mappings":"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","x_google_ignoreList":[6]}