//----------------------------------------------------------------------------------------------
// NOTE: If you change any of the types, make sure the JSON schema at the end of this file gets
// changed so they align.
//----------------------------------------------------------------------------------------------

import { LocalizeKey, ReferencedItem } from 'menus.model';

type Id = ReferencedItem;

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The data an extension provides to inform Platform.Bible of the settings it provides
 */
export type SettingsContribution = SettingsGroup | SettingsGroup[];
/**
 * A description of an extension's setting entry
 *
 * This interface was referenced by `SettingProperties`'s JSON-Schema definition
 * via the `patternProperty` "^[\w-]+\.[\w-]+$".
 */
export type Setting = ExtensionControlledSetting;
/**
 * Setting definition that is validated by the extension.
 */
export type ExtensionControlledSetting = SettingBase & ModifierExtensionControlled;
/**
 * Base information needed to describe a setting entry
 */
export type SettingBase = StateBase & {
  /**
   * localizeKey that displays in the settings dialog as the setting name
   */
  label: LocalizeKey;
  /**
   * localizeKey that displays in the settings dialog to describe the setting
   */
  description?: LocalizeKey;
  /**
   * Determines whether extensions can edit the setting in extension code (if absent or false, only the user will be able to edit the setting via the settings dialog)
   */
  shouldAllowProgrammaticChanges?: boolean;
  /**
   * name of another (extension-controlled) setting whose validator is allowed to change this setting's value even if `shouldAllowProgrammaticChanges` is false
   */
  childOf?: Id;
  [k: string]: unknown;
};
/**
 * The data an extension provides to inform Platform.Bible of the project settings it provides
 */
export type ProjectSettingsContribution = ProjectSettingsGroup | ProjectSettingsGroup[];
/**
 * A description of an extension's setting entry
 *
 * This interface was referenced by `ProjectSettingProperties`'s JSON-Schema definition
 * via the `patternProperty` "^[\w\-]+\.[\w\-]+$".
 */
export type ProjectSetting = ExtensionControlledProjectSetting;
/**
 * Setting definition that is validated by the extension.
 */
export type ExtensionControlledProjectSetting = ProjectSettingBase & ModifierExtensionControlled;
/**
 * Base information needed to describe a project setting entry
 */
export type ProjectSettingBase = SettingBase & ModifierProject;
/**
 * A description of an extension's user state entry
 *
 * This interface was referenced by `UserStateContribution`'s JSON-Schema definition
 * via the `patternProperty` "^[\w\-]+\.[\w\-]+$".
 *
 * This interface was referenced by `ProjectStateContribution`'s JSON-Schema definition
 * via the `patternProperty` "^[\w\-]+\.[\w\-]+$".
 */
export type UserState = ExtensionControlledState;
/**
 * State definition that is validated by the extension.
 */
export type ExtensionControlledState = StateBase & ModifierExtensionControlled;

/**
 * The data an extension provides to inform Platform.Bible of the user state it provides
 */
export interface UserStateContributionSchema {
  settingsContribution?: SettingsContribution;
  projectSettingsContribution?: ProjectSettingsContribution;
  userStateContribution?: UserStateContribution;
  projectStateContribution?: ProjectStateContribution;
  [k: string]: unknown;
}
/**
 * Group of related settings definitions
 */
export interface SettingsGroup {
  /**
   * localizeKey that displays in the settings dialog as the group name
   */
  label: LocalizeKey;
  /**
   * localizeKey that displays in the settings dialog to describe the group
   */
  description?: LocalizeKey;
  properties: SettingProperties;
  [k: string]: unknown;
}
/**
 * Object whose keys are setting IDs and whose values are settings objects
 */
export interface SettingProperties {
  [k: string]: Setting;
}
/**
 * Base information needed to describe a state entry
 */
export interface StateBase {
  /**
   * default value for the state/setting
   */
  default: unknown;
  /**
   * a state/setting ID whose value to set to this state/setting's starting value the first time this state/setting is loaded
   */
  derivesFrom?: Id;
  [k: string]: unknown;
}
/**
 * Modifies state/setting type to be extension-controlled. "Extension-controlled" means the extension provides the component and the validator for the state/setting, so the state/setting is controlled by the extension.
 */
export interface ModifierExtensionControlled {
  [k: string]: unknown;
}
/**
 * Group of related settings definitions
 */
export interface ProjectSettingsGroup {
  /**
   * localizeKey that displays in the project settings dialog as the group name
   */
  label: LocalizeKey;
  /**
   * localizeKey that displays in the project settings dialog to describe the group
   */
  description?: LocalizeKey;
  properties: ProjectSettingProperties;
  [k: string]: unknown;
}
/**
 * Object whose keys are setting IDs and whose values are settings objects
 */
export interface ProjectSettingProperties {
  [k: string]: ProjectSetting;
}
/**
 * Modifies setting type to be project setting
 */
export interface ModifierProject {
  /**
   * `RegExp` pattern(s) to match against `projectType` (using the [`test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) function) to determine whether this project setting should be displayed in the Project Settings Dialog of that `projectType`. null means do not show on any Project Settings dialog
   */
  includeProjectTypes?: null | string | string[];
  /**
   * `RegExp` pattern to match against `projectType` to determine if this project setting should absolutely not be displayed in the Project Settings dialog of that `projectType` even if it matches with `includeProjectTypes`
   */
  excludeProjectTypes?: null | string | string[];
  [k: string]: unknown;
}
/**
 * The data an extension provides to inform Platform.Bible of the user state it provides
 */
export interface UserStateContribution {
  [k: string]: UserState;
}
/**
 * The data an extension provides to inform Platform.Bible of the project state it provides
 */
export interface ProjectStateContribution {
  [k: string]: UserState;
}

//----------------------------------------------------------------------------------------------
// NOTE: If you change the schema below, make sure the TS types above get changed so they align.
//----------------------------------------------------------------------------------------------
/** JSON schema object that aligns with the PlatformMenus type */
export const menuDocumentSchema = {
  title: 'Platform.Bible menus',
  type: 'object',
  properties: {
    mainMenu: {
      description: 'Top level menu for the application',
      $ref: '#/$defs/multiColumnMenu',
    },
    defaultWebViewTopMenu: {
      description: "Default top menu for web views that don't specify their own",
      $ref: '#/$defs/multiColumnMenu',
    },
    defaultWebViewContextMenu: {
      description: "Default context menu for web views that don't specify their own",
      $ref: '#/$defs/singleColumnMenu',
    },
    webViewMenus: {
      description: 'Menus that apply per web view in the application',
      type: 'object',
      patternProperties: {
        '^[\\w\\-]+\\.[\\w\\-]+$': {
          $ref: '#/$defs/menusForOneWebView',
        },
      },
      additionalProperties: false,
    },
  },
  required: ['mainMenu', 'defaultWebViewTopMenu', 'defaultWebViewContextMenu', 'webViewMenus'],
  additionalProperties: false,
  $defs: {
    localizeKey: {
      description:
        "Identifier for a string that will be localized in a menu based on the user's UI language",
      type: 'string',
      pattern: '^%[\\w\\-\\.]+%$',
    },
    referencedItem: {
      description:
        'Name of some UI element (i.e., tab, column, group, menu item) or some PAPI object (i.e., command)',
      type: 'string',
      pattern: '^[\\w\\-]+\\.[\\w\\-]+$',
    },
    columnsWithHeaders: {
      description:
        'Group of columns that can be combined with other columns to form a multi-column menu',
      type: 'object',
      patternProperties: {
        '^[\\w\\-]+\\.[\\w\\-]+$': {
          description: 'Single column with a header string',
          type: 'object',
          properties: {
            label: {
              description: 'Header text for this this column in the UI',
              $ref: '#/$defs/localizeKey',
            },
            localizeNotes: {
              description:
                'Additional information provided by developers to help people who perform localization',
              type: 'string',
            },
            order: {
              description:
                'Relative order of this column compared to other columns (sorted ascending)',
              type: 'number',
            },
            isExtensible: {
              description:
                'Defines whether contributions are allowed to add menu groups to this column',
              type: 'boolean',
            },
          },
          required: ['label', 'order'],
          additionalProperties: false,
        },
      },
      properties: {
        isExtensible: {
          description:
            'Defines whether contributions are allowed to add columns to this multi-column menu',
          type: 'boolean',
        },
      },
    },
    menuGroups: {
      description:
        'Group of menu items that can be combined with other groups to form a single menu/submenu. Groups are separated using a line within the menu/submenu.',
      type: 'object',
      patternProperties: {
        '^[\\w\\-]+\\.[\\w\\-]+$': {
          description: 'Single group that contains menu items',
          type: 'object',
          oneOf: [
            {
              properties: {
                column: {
                  description:
                    'Column where this group belongs, not required for single column menus',
                  $ref: '#/$defs/referencedItem',
                },
                order: {
                  description:
                    'Relative order of this group compared to other groups in the same column or submenu (sorted ascending)',
                  type: 'number',
                },
                isExtensible: {
                  description:
                    'Defines whether contributions are allowed to add menu items to this menu group',
                  type: 'boolean',
                },
              },
              required: ['order'],
              additionalProperties: false,
            },
            {
              properties: {
                menuItem: {
                  description: 'Menu item that anchors the submenu where this group belongs',
                  $ref: '#/$defs/referencedItem',
                },
                order: {
                  description:
                    'Relative order of this group compared to other groups in the same column or submenu (sorted ascending)',
                  type: 'number',
                },
                isExtensible: {
                  description:
                    'Defines whether contributions are allowed to add menu items to this menu group',
                  type: 'boolean',
                },
              },
              required: ['menuItem', 'order'],
              additionalProperties: false,
            },
          ],
        },
      },
      additionalProperties: false,
    },
    menuItem: {
      description:
        'Single item in a menu that can be clicked on to take an action or can be the parent of a submenu',
      type: 'object',
      oneOf: [
        {
          properties: {
            id: {
              description: 'ID for this menu item that holds a submenu',
              $ref: '#/$defs/referencedItem',
            },
          },
          required: ['id'],
        },
        {
          properties: {
            command: {
              description: 'Name of the PAPI command to run when this menu item is selected.',
              $ref: '#/$defs/referencedItem',
            },
            iconPathBefore: {
              description: 'Path to the icon to display before the menu text',
              type: 'string',
            },
            iconPathAfter: {
              description: 'Path to the icon to display after the menu text',
              type: 'string',
            },
          },
          required: ['command'],
        },
      ],
      properties: {
        label: {
          description: 'Key that represents the text of this menu item to display',
          $ref: '#/$defs/localizeKey',
        },
        tooltip: {
          description:
            'Key that represents the text to display if a mouse pointer hovers over the menu item',
          $ref: '#/$defs/localizeKey',
        },
        searchTerms: {
          description:
            'Key that represents additional words the platform should reference when users are searching for menu items',
          $ref: '#/$defs/localizeKey',
        },
        localizeNotes: {
          description:
            'Additional information provided by developers to help people who perform localization',
          type: 'string',
        },
        group: {
          description: 'Group to which this menu item belongs',
          $ref: '#/$defs/referencedItem',
        },
        order: {
          description:
            'Relative order of this menu item compared to other menu items in the same group (sorted ascending)',
          type: 'number',
        },
      },
      required: ['label', 'group', 'order'],
      unevaluatedProperties: false,
    },
    groupsAndItems: {
      description: 'Core schema for a column',
      type: 'object',
      properties: {
        groups: {
          description: 'Groups that belong in this menu',
          $ref: '#/$defs/menuGroups',
        },
        items: {
          description: 'List of menu items that belong in this menu',
          type: 'array',
          items: { $ref: '#/$defs/menuItem' },
          uniqueItems: true,
        },
      },
      required: ['groups', 'items'],
    },
    singleColumnMenu: {
      description: 'Menu that contains a column without a header',
      type: 'object',
      allOf: [{ $ref: '#/$defs/groupsAndItems' }],
      unevaluatedProperties: false,
    },
    multiColumnMenu: {
      description: 'Menu that can contain multiple columns with headers',
      type: 'object',
      allOf: [
        { $ref: '#/$defs/groupsAndItems' },
        {
          properties: {
            columns: {
              description: 'Columns that belong in this menu',
              $ref: '#/$defs/columnsWithHeaders',
            },
          },
          required: ['columns'],
        },
      ],
      unevaluatedProperties: false,
    },
    menusForOneWebView: {
      description: 'Set of menus that are associated with a single tab',
      type: 'object',
      properties: {
        includeDefaults: {
          description:
            'Indicates whether the platform default menus should be included for this webview',
          type: 'boolean',
        },
        topMenu: {
          description: 'Menu that opens when you click on the top left corner of a tab',
          $ref: '#/$defs/multiColumnMenu',
        },
        contextMenu: {
          description: 'Menu that opens when you right click on the main body/area of a tab',
          $ref: '#/$defs/singleColumnMenu',
        },
      },
      additionalProperties: false,
    },
  },
};

Object.freeze(menuDocumentSchema);
