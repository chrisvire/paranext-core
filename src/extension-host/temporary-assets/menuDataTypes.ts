/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND.
 * Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this
 * file.
 */

/**
 * Notes about things found when transforming
 *
 * 1. Descriptions from PlatformBibleMenus are put on the resulting type
 * 2. Error: Property 'isExtensible' of type 'boolean | undefined' is not assignable to 'string' index
 *    type '{ label: string; localizeNotes?: string | undefined; order: number; isExtensible?:
 *    boolean | undefined; }'. TODO: Resolve
 *
 * Things changes: Added "allOf": [ { "$ref": "#/$defs/multiColumnMenu" } ] where multiColumnMenu is
 * used because otherwise it generates multiple of them. Did the same for singleColumnMenu
 */

/** Menu that can contain multiple columns with headers */
export type MultiColumnMenu = GroupsAndItems & {
  columns: ColumnsWithHeaders;
  [k: string]: unknown;
};
/** Single item in a menu that can be clicked on to take an action or can be the parent of a submenu */
export type MenuItem = {
  /** Key that represents the text of this menu item to display */
  label: string;
  /** Key that represents the text to display if a mouse pointer hovers over the menu item */
  tooltip?: string;
  /**
   * Key that represents additional words the platform should reference when users are searching for
   * menu items
   */
  searchTerms?: string;
  /** Additional information provided by developers to help people who perform localization */
  localizeNotes?: string;
  /** Group to which this menu item belongs */
  group: string;
  /**
   * Relative order of this menu item compared to other menu items in the same group (sorted
   * ascending)
   */
  order: number;
  [k: string]: unknown;
} & MenuItem1;
export type MenuItem1 =
  | {
      /** ID for this menu item that holds a submenu */
      id: string;
      [k: string]: unknown;
    }
  | {
      /** Name of the PAPI command to run when this menu item is selected. */
      command: string;
      /** Path to the icon to display on the left side of the menu text */
      iconPathBefore?: string;
      /** Path to the icon to display on the right side of the menu text */
      iconPathAfter?: string;
      [k: string]: unknown;
    };
/** Menu that contains a column without a header */
export type SingleColumnMenu = GroupsAndItems;

export interface PlatformBibleMenus {
  /** Top level menu for the application */
  mainMenu?: MultiColumnMenu;
  /** Default top menu for web views that don't specify their own */
  defaultWebViewTopMenu?: MultiColumnMenu;
  /** Default context menu for web views that don't specify their own */
  defaultWebViewContextMenu?: SingleColumnMenu;
  /** Menus that apply per web view in the application */
  webViewMenus?: {
    [k: string]: MenusForOneWebView;
  };
}
/** Core schema for a column */
export interface GroupsAndItems {
  groups: MenuGroups;
  /** List of menu items that belong in this menu */
  items: MenuItem[];
  [k: string]: unknown;
}
/** Groups that belong in this menu */
export interface MenuGroups {
  /**
   * Single group that contains menu items
   *
   * This interface was referenced by `MenuGroups`'s JSON-Schema definition via the
   * `patternProperty` "^[\w-]+.[\w-]+$".
   */
  [k: string]:
    | {
        /** Column where this group belongs, not required for single column menus */
        column?: string;
        /**
         * Relative order of this group compared to other groups in the same column or submenu
         * (sorted ascending)
         */
        order: number;
        /** Defines whether contributions are allowed to add menu items to this menu group */
        isExtensible?: boolean;
      }
    | {
        /** Menu item that anchors the submenu where this group belongs */
        menuItem: string;
        /**
         * Relative order of this group compared to other groups in the same column or submenu
         * (sorted ascending)
         */
        order: number;
        /** Defines whether contributions are allowed to add menu items to this menu group */
        isExtensible?: boolean;
      };
}
/** Columns that belong in this menu */
export interface ColumnsWithHeaders {
  /** Defines whether contributions are allowed to add columns to this multi-column menu */
  isExtensible?: boolean;
  /**
   * Single column with a header string
   *
   * This interface was referenced by `ColumnsWithHeaders`'s JSON-Schema definition via the
   * `patternProperty` "^[\w-]+.[\w-]+$".
   */
  [k: string]: {
    /** Header text for this this column in the UI */
    label: string;
    /** Additional information provided by developers to help people who perform localization */
    localizeNotes?: string;
    /** Relative order of this column compared to other columns (sorted ascending) */
    order: number;
    /** Defines whether contributions are allowed to add menu groups to this column */
    isExtensible?: boolean;
  };
}
/**
 * Set of menus that are associated with a single tab
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition via the `patternProperty`
 * "^[\w-]+.[\w-]+$".
 */
export interface MenusForOneWebView {
  /** Indicates whether the platform default menus should be included for this webview */
  includeDefaults?: boolean;
  /** Menu that opens when you click on the top left corner of a tab */
  topMenu?: MultiColumnMenu;
  /** Menu that opens when you right click on the main body/area of a tab */
  contextMenu?: SingleColumnMenu;
}
